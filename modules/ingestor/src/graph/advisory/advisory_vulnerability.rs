use crate::graph::{advisory::AdvisoryContext, error::Error, vulnerability::VulnerabilityContext};
use sea_orm::{
    ActiveModelTrait, ColumnTrait, ConnectionTrait, EntityTrait, NotSet, QueryFilter, Set,
};
use sea_query::IntoCondition;
use tracing::instrument;
use trustify_common::{cpe::Cpe, purl::Purl};
use trustify_cvss::cvss3::Cvss3Base;
use trustify_entity::{
    self as entity, cvss3::Severity, purl_status, status, version_range, vulnerability,
};

// Add these use statements
use crate::graph::advisory::version::VersionInfo;

#[derive(Clone, Debug)]
pub struct AdvisoryVulnerabilityContext<'g> {
    pub advisory: AdvisoryContext<'g>,
    pub advisory_vulnerability: entity::advisory_vulnerability::Model,
}

impl<'g> From<(&AdvisoryContext<'g>, entity::advisory_vulnerability::Model)>
    for AdvisoryVulnerabilityContext<'g>
{
    fn from(
        (advisory, vulnerability): (&AdvisoryContext<'g>, entity::advisory_vulnerability::Model),
    ) -> Self {
        Self {
            advisory: advisory.clone(),
            advisory_vulnerability: vulnerability,
        }
    }
}

impl AdvisoryVulnerabilityContext<'_> {
    pub async fn vulnerability<C: ConnectionTrait>(
        &self,
        connection: &C,
    ) -> Result<Option<VulnerabilityContext>, Error> {
        Ok(
            vulnerability::Entity::find_by_id(&self.advisory_vulnerability.vulnerability_id)
                .one(connection)
                .await?
                .map(|vuln| VulnerabilityContext::new(self.advisory.graph, vuln)),
        )
    }

    #[instrument(skip(self, connection), err)]
    pub async fn ingest_package_status<C: ConnectionTrait>(
        &self,
        cpe_context: Option<Cpe>,
        purl: &Purl,
        status: &str,
        info: VersionInfo,
        connection: &C,
    ) -> Result<(), Error> {
        let status = status::Entity::find()
            .filter(status::Column::Slug.eq(status))
            .one(connection)
            .await?
            .ok_or(Error::InvalidStatus(status.to_string()))?;

        let package = self.advisory.graph.ingest_package(purl, connection).await?;

        let package_status = purl_status::Entity::find()
            .filter(purl_status::Column::BasePurlId.eq(package.base_purl.id))
            .filter(purl_status::Column::AdvisoryId.eq(self.advisory.advisory.id))
            .filter(purl_status::Column::StatusId.eq(status.id))
            .left_join(version_range::Entity)
            .filter(info.clone().into_condition())
            .one(connection)
            .await?;

        if package_status.is_some() {
            return Ok(());
        }

        let version_range = info.clone().into_active_model();

        version_range::Entity::insert(version_range.clone())
            .on_conflict_do_nothing()
            .exec(connection)
            .await?;

        let package_status = purl_status::ActiveModel {
            id: Default::default(),
            advisory_id: Set(self.advisory_vulnerability.advisory_id),
            vulnerability_id: Set(self.advisory_vulnerability.vulnerability_id.clone()),
            status_id: Set(status.id),
            base_purl_id: Set(package.base_purl.id),
            version_range_id: Set(info.clone().uuid()),
            context_cpe_id: NotSet,
        };

        package_status.insert(connection).await?;

        Ok(())
    }

    pub async fn cvss3_scores<C: ConnectionTrait>(
        &self,
        connection: &C,
    ) -> Result<Vec<Cvss3Base>, Error> {
        Ok(entity::cvss3::Entity::find()
            .filter(entity::cvss3::Column::AdvisoryId.eq(self.advisory_vulnerability.advisory_id))
            .filter(
                entity::cvss3::Column::VulnerabilityId
                    .eq(self.advisory_vulnerability.vulnerability_id.clone()),
            )
            .all(connection)
            .await?
            .into_iter()
            .map(|e| e.into())
            .collect())
    }

    pub async fn get_cvss3_score<C: ConnectionTrait>(
        &self,
        minor_version: u8,
        connection: &C,
    ) -> Result<Option<Cvss3Base>, Error> {
        Ok(entity::cvss3::Entity::find()
            .filter(entity::cvss3::Column::AdvisoryId.eq(self.advisory_vulnerability.advisory_id))
            .filter(
                entity::cvss3::Column::VulnerabilityId
                    .eq(self.advisory_vulnerability.vulnerability_id.clone()),
            )
            .filter(entity::cvss3::Column::MinorVersion.eq(minor_version as i32))
            .one(connection)
            .await?
            .map(|cvss| cvss.into()))
    }

    #[instrument(skip(self, connection), err)]
    pub async fn ingest_cvss3_score<C: ConnectionTrait>(
        &self,
        cvss3: Cvss3Base,
        connection: &C,
    ) -> Result<Cvss3Base, Error> {
        if let Some(found) = self
            .get_cvss3_score(cvss3.minor_version, connection)
            .await?
        {
            return Ok(found);
        }

        let model = entity::cvss3::ActiveModel {
            advisory_id: Set(self.advisory_vulnerability.advisory_id),
            vulnerability_id: Set(self.advisory_vulnerability.vulnerability_id.clone()),
            minor_version: sea_orm::ActiveValue::Set(cvss3.minor_version as i32),
            av: Set(cvss3.av.into()),
            ac: Set(cvss3.ac.into()),
            pr: Set(cvss3.pr.into()),
            ui: Set(cvss3.ui.into()),
            s: Set(cvss3.s.into()),
            c: Set(cvss3.c.into()),
            i: Set(cvss3.i.into()),
            a: Set(cvss3.a.into()),
            score: Set(cvss3.score().roundup().value()),
            severity: Set(Severity::from(cvss3.score().roundup().severity())),
        };

        Ok(model.insert(connection).await?.into())
    }
}

#[cfg(test)]
mod test {
    use crate::graph::Graph;
    use crate::graph::advisory::version::{Version, VersionInfo, VersionSpec};
    use test_context::test_context;
    use test_log::test;
    use trustify_common::hashing::Digests;
    use trustify_entity::version_scheme::VersionScheme;
    use trustify_test_context::TrustifyContext;

    #[test_context(TrustifyContext, skip_teardown)]
    #[test(tokio::test)]
    async fn advisory_affected_vulnerability_assertions(
        ctx: TrustifyContext,
    ) -> Result<(), anyhow::Error> {
        let system = Graph::new(ctx.db.clone());

        let advisory = system
            .ingest_advisory(
                "RHSA-GHSA-1",
                ("source", "http://db.com/rhsa-ghsa-2"),
                &Digests::digest("RHSA-GHSA-1"),
                (),
                &ctx.db,
            )
            .await?;

        let advisory_vulnerability = advisory
            .link_to_vulnerability("CVE-42", None, &ctx.db)
            .await?;

        advisory_vulnerability
            .ingest_package_status(
                None,
                &"pkg:maven/io.quarkus/quarkus-core".try_into()?,
                "affected",
                VersionInfo {
                    scheme: VersionScheme::Semver,
                    spec: VersionSpec::Range(
                        Version::Inclusive("1.0.2".to_string()),
                        Version::Exclusive("1.2.0".to_string()),
                    ),
                },
                &ctx.db,
            )
            .await?;

        advisory_vulnerability
            .ingest_package_status(
                None,
                &"pkg:maven/io.quarkus/quarkus-core".try_into()?,
                "not_affected",
                VersionInfo {
                    scheme: VersionScheme::Semver,
                    spec: VersionSpec::Exact("1.1.9".to_string()),
                },
                &ctx.db,
            )
            .await?;

        /*
        let affected = advisory_vulnerability
            .affected_assertions(Transactional::None)
            .await?;

        assert_eq!(1, affected.assertions.len());

         */

        Ok(())
    }

    #[test_context(TrustifyContext, skip_teardown)]
    #[test(tokio::test)]
    async fn advisory_not_affected_vulnerability_assertions(
        ctx: TrustifyContext,
    ) -> Result<(), anyhow::Error> {
        let system = Graph::new(ctx.db.clone());

        let advisory = system
            .ingest_advisory(
                "RHSA-GHSA-1",
                ("source", "http://db.com/rhsa-ghsa-2"),
                &Digests::digest("RHSA-GHSA-1"),
                (),
                &ctx.db,
            )
            .await?;

        let advisory_vulnerability = advisory
            .link_to_vulnerability("INTERAL-77", None, &ctx.db)
            .await?;

        advisory_vulnerability
            .ingest_package_status(
                None,
                &"pkg:maven/io.quarkus/quarkus-core".try_into()?,
                "affected",
                VersionInfo {
                    scheme: VersionScheme::Semver,
                    spec: VersionSpec::Range(
                        Version::Inclusive("1.0.2".to_string()),
                        Version::Exclusive("1.2.0".to_string()),
                    ),
                },
                &ctx.db,
            )
            .await?;

        advisory_vulnerability
            .ingest_package_status(
                None,
                &"pkg:maven/io.quarkus/quarkus-core".try_into()?,
                "not_affected",
                VersionInfo {
                    scheme: VersionScheme::Semver,
                    spec: VersionSpec::Exact("1.1.9".to_string()),
                },
                &ctx.db,
            )
            .await?;

        Ok(())
    }
}
