mod details;
mod summary;

use std::{collections::HashMap, ops::Deref};

use async_graphql::SimpleObject;
pub use details::*;
use sea_orm::{ColumnTrait, ConnectionTrait, ModelTrait, QueryFilter};
pub use summary::*;

use crate::Error;
use serde::{Deserialize, Serialize};
use time::OffsetDateTime;
use trustify_common::memo::Memo;
use trustify_entity::{advisory_vulnerability, vulnerability, vulnerability_description};
use utoipa::ToSchema;

#[derive(Default, Serialize, Deserialize, Debug, Clone, ToSchema, PartialEq, Eq, SimpleObject)]
pub struct VulnerabilityHead {
    #[schema(required)]
    pub normative: bool,

    /// The globally-unique identifier for the vulnerability.
    /// Traditionally (but not required) refers to the assigned
    /// CVE identifier.
    pub identifier: String,

    /// The title of the vulnerability, if known.
    #[schema(required)]
    pub title: Option<String>,

    /// The description of the vulnerability, if known.
    #[schema(required)]
    pub description: Option<String>,

    /// The date (in RFC3339 format) of when the vulnerability identifier was reserved, if any.
    #[schema(required)]
    #[serde(with = "time::serde::rfc3339::option")]
    pub reserved: Option<OffsetDateTime>,

    /// The date (in RFC3339 format) of when the vulnerability was published, if any.
    #[schema(required)]
    #[serde(with = "time::serde::rfc3339::option")]
    pub published: Option<OffsetDateTime>,

    /// The date (in RFC3339 format) of when the vulnerability was last modified, if any.
    #[schema(required)]
    #[serde(with = "time::serde::rfc3339::option")]
    pub modified: Option<OffsetDateTime>,

    /// The date (in RFC3339 format) of when the vulnerability was last withdrawn, if any.
    #[schema(required)]
    #[serde(with = "time::serde::rfc3339::option")]
    pub withdrawn: Option<OffsetDateTime>,

    /// The date (in RFC3339 format) of when the vulnerability was discovered, if any.
    #[schema(required)]
    #[serde(with = "time::serde::rfc3339::option")]
    pub discovered: Option<OffsetDateTime>,

    /// The date (in RFC3339 format) of when software containing the vulnerability first released, if known.
    #[schema(required)]
    #[serde(with = "time::serde::rfc3339::option")]
    pub released: Option<OffsetDateTime>,

    /// Associated CWE, if any.
    #[schema(required)]
    pub cwes: Vec<String>,
}

impl VulnerabilityHead {
    pub async fn from_vulnerability_entity<C: ConnectionTrait>(
        entity: &vulnerability::Model,
        description: Memo<vulnerability_description::Model>,
        tx: &C,
    ) -> Result<Self, Error> {
        let description = match description {
            Memo::Provided(inner) => inner.map(|inner| inner.description),
            Memo::NotProvided => entity
                .find_related(vulnerability_description::Entity)
                .filter(vulnerability_description::Column::Lang.eq("en"))
                .one(tx)
                .await?
                .map(|inner| inner.description),
        };

        Ok(Self::from_vulnerability_entity_and_description(
            entity,
            description,
        ))
    }

    pub fn from_vulnerability_entity_and_description(
        entity: &vulnerability::Model,
        description: Option<String>,
    ) -> Self {
        Self {
            normative: true,
            identifier: entity.id.clone(),
            title: entity.title.clone(),
            description,
            reserved: entity.reserved,
            published: entity.published,
            modified: entity.modified,
            withdrawn: entity.withdrawn,
            discovered: None,
            released: None,
            cwes: entity.cwes.clone().unwrap_or_default(),
        }
    }

    pub fn from_advisory_vulnerability_entity(
        advisory_vulnerability: &advisory_vulnerability::Model,
        vuln: &vulnerability::Model,
    ) -> Self {
        Self {
            normative: false,
            identifier: vuln.id.clone(),
            title: advisory_vulnerability.title.clone(),
            description: advisory_vulnerability.description.clone(),
            reserved: advisory_vulnerability.reserved_date,
            published: vuln.published,
            modified: vuln.modified,
            withdrawn: vuln.withdrawn,
            discovered: advisory_vulnerability.discovery_date,
            released: advisory_vulnerability.release_date,
            cwes: advisory_vulnerability.cwes.clone().unwrap_or_default(),
        }
    }
}

#[derive(Serialize, Deserialize, Debug, ToSchema)]
pub struct AnalysisRequest {
    pub purls: Vec<String>,
}

#[derive(Serialize, Deserialize, Debug, ToSchema)]
pub struct AnalysisResponse(HashMap<String, Vec<VulnerabilityDetails>>);

impl Deref for AnalysisResponse {
    type Target = HashMap<String, Vec<VulnerabilityDetails>>;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
